using Elastic.Clients.Elasticsearch;
using Elastic.Transport;
using Microsoft.Extensions.Options;

public static class ElasticsearchServiceCollectionExtensions
{
    public static IServiceCollection AddElasticsearchClient(
        this IServiceCollection services)
    {
        services.AddSingleton<ElasticsearchClient>(sp =>
        {
            var options = sp.GetRequiredService<IOptions<ElasticsearchOptions>>().Value;

            if (options.Uris == null || options.Uris.Count == 0)
                throw new ArgumentException("Elasticsearch Uris are required");

            var nodeUris = options.Uris.Select(u => new Uri(u)).ToArray();

            NodePool pool = options.PoolType.ToLower() switch
            {
                "static"   => new StaticNodePool(nodeUris),
                "sniffing" => new SniffingNodePool(nodeUris),
                _          => new SingleNodePool(nodeUris[0]),
            };

            var settings = new ElasticsearchClientSettings(pool);

            if (!string.IsNullOrEmpty(options.Username) &&
                !string.IsNullOrEmpty(options.Password))
            {
                settings = settings.Authentication(
                    new BasicAuthentication(options.Username, options.Password));
            }

            return new ElasticsearchClient(settings);
        });

        return services;
    }
}
